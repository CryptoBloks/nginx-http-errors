## Defines HTML formatted HTTP status codes and responses
## https://github.com/CryptoBloks/nginx-http-errors
    location @HTML-400 {
        return 400 '<html><body><h1>400 Bad request</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-401 {
        return 401 '<html><body><h1>401 Unauthorized</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-402 {
        return 402 '<html><body><h1>402 Payment Required</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-403 {
        return 403 '<html><body><h1>403 Forbidden</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-404 {
        return 404 '<html><body><h1>404 Not Found</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-405 {
        return 405 '<html><body><h1>405 Method Not Allowed</h1></body></html>';
        add_header Allow "GET, POST, HEAD" always;
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-406 {
        return 406 '<html><body><h1>406 Not Acceptable</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-408 {
        return 408 '<html><body><h1>408 Request Timeout</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-409 {
        return 409 '<html><body><h1>409 Conflict</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-410 {
        return 410 '<html><body><h1>410 Gone</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-411 {
        return 411 '<html><body><h1>411 Length Required</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-412 {
        return 412 '<html><body><h1>412 Precondition Failed</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-413 {
        return 413 '<html><body><h1>413 Payload Too Large</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-414 {
        return 414 '<html><body><h1>414 URI Too Long</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-415 {
        return 415 '<html><body><h1>415 Unsupported Media Type</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-416 {
        return 416 '<html><body><h1>416 Range Not Satisfiable</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-417 {
        return 417 '<html><body><h1>417 Expectation Failed</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-418 {
        return 418 '<html><body><h1>418 I&#39;m a Teapot</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-421 {
        return 421 '<html><body><h1>421 Misdirected Request</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-422 {
        return 422 '<html><body><h1>422 Unprocessable Entity</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-423 {
        return 423 '<html><body><h1>423 Locked</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-425 {
        return 425 '<html><body><h1>425 Too Early</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-426 {
        return 426 '<html><body><h1>426 Upgrade Required</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-428 {
        return 428 '<html><body><h1>428 Precondition Required</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-429 {
        return 429 '<html><body><h1>429 Too Many Requests</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-431 {
        return 431 '<html><body><h1>431 Request Header Fields Too Large</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-451 {
        return 451 '<html><body><h1>451 Unavailable For Legal Reasons</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-500 {
        return 500 '<html><body><h1>500 Internal Server Error</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-501 {
        return 501 '<html><body><h1>501 Not Implemented</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-502 {
        return 502 '<html><body><h1>502 Bad Gateway</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-503 {
        return 503 '<html><body><h1>503 Service Unavailable</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-504 {
        return 504 '<html><body><h1>504 Gateway Timeout</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-505 {
        return 505 '<html><body><h1>505 HTTP Version Not Supported</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-506 {
        return 506 '<html><body><h1>506 Variant Also Negotiates</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-507 {
        return 507 '<html><body><h1>507 Insufficient Storage</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-508 {
        return 508 '<html><body><h1>508 Loop Detected</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-510 {
        return 510 '<html><body><h1>510 Not Extended</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    location @HTML-511 {
        return 511 '<html><body><h1>511 Network Authentication Required</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
## Defines JSON formatted HTTP status codes and responses
    location @JSON-400 {
        return 400 '{"status":400,"message":"Bad request"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-401 {
        return 401 '{"status":401,"message":"Unauthorized"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-402 {
        return 402 '{"status":402,"message":"Payment Required"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-403 {
        return 403 '{"status":403,"message":"Forbidden"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-404 {
        return 404 '{"status":404,"message":"Not Found"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-405 {
        return 405 '{"status":405,"message":"Method Not Allowed"}\n';
        add_header Allow "GET, POST, HEAD" always;
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-406 {
        return 406 '{"status":406,"message":"Not Acceptable"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-408 {
        return 408 '{"status":408,"message":"Request Timeout"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-409 {
        return 409 '{"status":409,"message":"Conflict"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-410 {
        return 410 '{"status":410,"message":"Gone"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-411 {
        return 411 '{"status":411,"message":"Length Required"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-412 {
        return 412 '{"status":412,"message":"Precondition Failed"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-413 {
        return 413 '{"status":413,"message":"Payload Too Large"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-414 {
        return 414 '{"status":414,"message":"URI Too Long"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-415 {
        return 415 '{"status":415,"message":"Unsupported Media Type"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-416 {
        return 416 '{"status":416,"message":"Range Not Satisfiable"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-417 {
        return 417 '{"status":417,"message":"Expectation Failed"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-418 {
        return 418 '{"status":418,"message":"I\'m a Teapot"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-421 {
        return 421 '{"status":421,"message":"Misdirected Request"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-422 {
        return 422 '{"status":422,"message":"Unprocessable Entity"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-423 {
        return 423 '{"status":423,"message":"Locked"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-425 {
        return 425 '{"status":425,"message":"Too Early"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-426 {
        return 426 '{"status":426,"message":"Upgrade Required"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-428 {
        return 428 '{"status":428,"message":"Precondition Required"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-429 {
        return 429 '{"status":429,"message":"Too Many Requests"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-431 {
        return 431 '{"status":431,"message":"Request Header Fields Too Large"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-451 {
        return 451 '{"status":451,"message":"Unavailable For Legal Reasons"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-500 {
        return 500 '{"status":500,"message":"Internal Server Error"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-501 {
        return 501 '{"status":501,"message":"Not Implemented"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-502 {
        return 502 '{"status":502,"message":"Bad Gateway"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-503 {
        return 503 '{"status":503,"message":"Service Unavailable"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-504 {
        return 504 '{"status":504,"message":"Gateway Timeout"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-505 {
        return 505 '{"status":505,"message":"HTTP Version Not Supported"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-506 {
        return 506 '{"status":506,"message":"Variant Also Negotiates"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-507 {
        return 507 '{"status":507,"message":"Insufficient Storage"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-508 {
        return 508 '{"status":508,"message":"Loop Detected"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-510 {
        return 510 '{"status":510,"message":"Not Extended"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }
    location @JSON-511 {
        return 511 '{"status":511,"message":"Network Authentication Required"}\n';
        add_header Cache-Control no-cache always;
        add_header Content-Type application/json always;
    }