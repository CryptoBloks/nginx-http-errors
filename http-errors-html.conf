## HTML formatted HTTP status codes and responses
## https://github.com/CryptoBloks/nginx-http-errors

    error_page 400 = @400;
    location @400 {
        return 400 '<html><body><h1>400 Bad request</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 401 = @401;
    location @401 {
        return 401 '<html><body><h1>401 Unauthorized</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 402 = @402;
    location @402 {
        return 402 '<html><body><h1>402 Payment Required</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 403 = @403;
    location @403 {
        return 403 '<html><body><h1>403 Forbidden</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 404 = @404;
    location @404 {
        return 404 '<html><body><h1>404 Not Found</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 405 = @405;
    location @405 {
        return 405 '<html><body><h1>405 Method Not Allowed</h1></body></html>';
        add_header Allow "GET, POST, HEAD" always;
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 406 = @406;
    location @406 {
        return 406 '<html><body><h1>406 Not Acceptable</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 408 = @408;
    location @408 {
        return 408 '<html><body><h1>408 Request Timeout</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 409 = @409;
    location @409 {
        return 409 '<html><body><h1>409 Conflict</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 410 = @410;
    location @410 {
        return 410 '<html><body><h1>410 Gone</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 411 = @411;
    location @411 {
        return 411 '<html><body><h1>411 Length Required</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    
    error_page 412 = @412;
    location @412 {
        return 412 '<html><body><h1>412 Precondition Failed</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 413 = @413;
    location @413 {
        return 413 '<html><body><h1>413 Payload Too Large</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 414 = @414;
    location @414 {
        return 414 '<html><body><h1>414 URI Too Long</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 415 = @415;
    location @415 {
        return 415 '<html><body><h1>415 Unsupported Media Type</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 416 = @416;
    location @416 {
        return 416 '<html><body><h1>416 Range Not Satisfiable</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 417 = @417;
    location @417 {
        return 417 '<html><body><h1>417 Expectation Failed</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 418 = @418;
    location @418 {
        return 418 '<html><body><h1>418 I&#39;m a Teapot</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 421 = @421;
    location @421 {
        return 421 '<html><body><h1>421 Misdirected Request</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 422 = @422;
    location @422 {
        return 422 '<html><body><h1>422 Unprocessable Entity</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 423 = @423;
    location @423 {
        return 423 '<html><body><h1>423 Locked</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 425 = @425;
    location @425 {
        return 425 '<html><body><h1>425 Too Early</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 426 = @426;
    location @426 {
        return 426 '<html><body><h1>426 Upgrade Required</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 428 = @428;
    location @428 {
        return 428 '<html><body><h1>428 Precondition Required</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 429 = @429;
    location @429 {
        return 429 '<html><body><h1>429 Too Many Requests</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 431 = @431;
    location @431 {
        return 431 '<html><body><h1>431 Request Header Fields Too Large</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 451 = @451;
    location @451 {
        return 451 '<html><body><h1>451 Unavailable For Legal Reasons</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 500 = @500;
    location @500 {
        return 500 '<html><body><h1>500 Internal Server Error</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 501 = @501;
    location @501 {
        return 501 '<html><body><h1>501 Not Implemented</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 502 = @502;
    location @502 {
        return 502 '<html><body><h1>502 Bad Gateway</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 503 = @503;
    location @503 {
        return 503 '<html><body><h1>503 Service Unavailable</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }

    error_page 504 = @504;
    location @504 {
        return 504 '<html><body><h1>504 Gateway Timeout</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    
    error_page 505 = @505;
    location @505 {
        return 505 '<html><body><h1>505 HTTP Version Not Supported</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    
    error_page 506 = @506;
    location @506 {
        return 506 '<html><body><h1>506 Variant Also Negotiates</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    
    error_page 507 = @507;
    location @507 {
        return 507 '<html><body><h1>507 Insufficient Storage</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    
    error_page 508 = @508;
    location @508 {
        return 508 '<html><body><h1>508 Loop Detected</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    
    error_page 510 = @510;
    location @510 {
        return 510 '<html><body><h1>510 Not Extended</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }
    
    error_page 511 = @511;
    location @511 {
        return 511 '<html><body><h1>511 Network Authentication Required</h1></body></html>';
        add_header Cache-Control no-cache always;
        add_header Content-Type text/HTML always;
    }